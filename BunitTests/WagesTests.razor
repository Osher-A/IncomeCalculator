@using IncomeCalculator.Componnents
@using IncomeCalculator.Data
@using IncomeCalculator.Pages
@using IncomeCalculator.Services
@using IncomeCalculator.Shared.Interfaces
@using IncomeCalculator.DAL
@using Moq

@inherits BunitTestContext

@code {
    private Mock<IMinWageRepository> _minWageRepo;
    private IRenderedFragment? _cut;
    private IRenderedComponent<WorkInfo>? _workInfoComponent;
    private AngleSharp.Dom.IElement _rateField;
    private AngleSharp.Dom.IElement _hoursField;
    [SetUp]
    public void SetUp()
    {
        _minWageRepo = new Mock<IMinWageRepository>();
        _minWageRepo.Setup(mw => mw.GetAllMinWages()).Returns(GetMinWageData());
        Services.AddSingleton<IMinWageRepository>(_minWageRepo.Object);
        Services.AddSingleton<MinWageService>();
        Services.AddSingleton<IMessageService, MessageService>();
        Services.AddAutoMapper(AppDomain.CurrentDomain.GetAssemblies());

        _cut = Render( 
    @<Wages/>);
        _workInfoComponent = _cut.FindComponent<WorkInfo>();
        _hoursField = _workInfoComponent.Find("#hours");
        _rateField = _workInfoComponent.Find("#rate");
    }
    [Test]
    public void WagesForm_WhenNotFillingRequiredFields_TotalDisplayShouldBeNone()
    {
       _workInfoComponent.Find("#hours").Input(1);
       _cut.Find("h2").MarkupMatches(
    @<h2 class="text-center ml-5" style="display: none">Total per Week: £0.00</h2>);
    }
    
    [Test]
    public void WagesForm_WhenFillingRequiredFields_TotalDisplayedAccordingly()
    {
        _hoursField.Input(10.0);
        _hoursField.TriggerEvent("onmouseleave", new EventArgs());
        _rateField.Input("£10.00");
        _rateField.TriggerEvent("onmouseleave", new EventArgs());

        _cut.Find("h2").MarkupMatches(
    @<h2 class="text-center ml-5" style="display: normal">Total per Week: £100.00</h2>);
    }

     [Test]
    public void WagesForm_WhenFillingRequiredFieldsAndSelectingMontlyRadioButton_TotalMonthlyWagesDisplayed()
    {
        var radioButtons = _cut.FindAll("#radioButton input");
        radioButtons[1].Change("Month");
        _hoursField.Input(10.0);
        _hoursField.TriggerEvent("onmouseleave", new EventArgs());
        _rateField.Input("£10.00");
        _rateField.TriggerEvent("onmouseleave", new EventArgs());

        _cut.Find("h2").MarkupMatches(
    @<h2 class="text-center ml-5" style="display: normal">Total per Month: £433.33</h2>);
    }

     [Test]
    public void WagesForm_WhenFillingRequiredFieldsAndSelectingYearRadioButton_TotalYearlyWagesDisplayed()
    {
        var radioButtons = _cut.FindAll("#radioButton input");
        radioButtons[2].Change("Year");
        _hoursField.Input(10.0);
        _hoursField.TriggerEvent("onmouseleave", new EventArgs());
        _rateField.Input("£10.00");
        _rateField.TriggerEvent("onmouseleave", new EventArgs());

        _cut.Find("h2").MarkupMatches(
    @<h2 class="text-center ml-5" style="display: normal">Total per Year: £5,200.00</h2>
    );
    }

    [Test]
    public void WagesForm_WhenSelectingMinWageCheckbox_TaxyearAndAgeboxDisplayed()
    {
        //Arrange
        var minWageCheckBox = _workInfoComponent.Find("#checkBox");

        //Act
        minWageCheckBox.Change(true);

        //Assert
        _workInfoComponent.Find("#ageRow").MarkupMatches( @<div id="ageRow" style="display: normal; grid-column: 1 / 2;" class="text-right"> 
        <label for="age" class="form-label">Age</label></div>);

        _workInfoComponent.FindComponent<TaxYearBox>().MarkupMatches(@<TaxYearBox Display="normal"/>);

    }
      private List<MinWage> GetMinWageData()
    {
        return new List<MinWage>
        {
            new MinWage(0, new DateTime(2020, 04, 06), 4.55m),
            new MinWage(18, new DateTime(2020 ,04, 06), 6.45m),
            new MinWage(21, new DateTime(2020, 04, 06), 8.20m),
            new MinWage(25, new DateTime(2020, 04, 06), 8.72m),
            new MinWage(0, new DateTime(2021, 04, 06), 4.62m),
            new MinWage(18, new DateTime(2021, 04, 06), 6.56m),
            new MinWage(21, new DateTime(2021, 04, 06), 8.36m),
            new MinWage(25, new DateTime(2021, 04, 06), 8.91m)
        };
}
}
